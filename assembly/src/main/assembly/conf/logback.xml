<!-- 
scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟. 
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false
 -->
<configuration scan="true" scanPeriod="60000" debug="false">

	<!-- 过滤掉 TRACE 和 DEBUG 级别的日志，info,warn，error日志会打到info.log，总大小最大45G，每个文件最大3G，每天1个文件，最多保留15个文件 -->
	<appender name="INFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>INFO</level>
		</filter>
		<file>logs/info.log</file>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>logs/info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>3GB</maxFileSize>
			<maxHistory>15</maxHistory>
			<totalSizeCap>45GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}|[%thread]|%-5level|%logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 打印MyBatis的日志 只有sql日志会打到mybatis.log，总大小最大45G，每个文件最大3G，每天1个文件，最多保留15个文件-->
	<appender name="MYBATIS"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>DEBUG</level>
		</filter>
		<file>logs/mybatis.log</file>

		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>logs/mybatis-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>3GB</maxFileSize>
			<maxHistory>15</maxHistory>
			<totalSizeCap>45GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}|[%thread]|%-5level|%logger - %msg%n</pattern>
		</encoder>
	</appender>

	<!--
	    用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。 
		name：用来指定受此logger约束的某一个包或者具体的某一个类。 
		level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前logger将会继承上级的级别。 
		additivity：是否向上级logger传递打印信息。默认是true。
		意味着：打印{package}.dal.mapper package下面的日志，这个是所有的sql日志。同时，这个日志也会添加到root logger。
		那么如果我们在运行时，把INFO appender的<level>INFO</level>，改为<level>DEBUG</level>，那么sql日志也会同时打印到info.log文件中
	 -->
	<logger name="cn.glowd.proton.dal.mapper" level="DEBUG" additivity="true">
		<appender-ref ref="MYBATIS" />
	</logger>

	<!-- error日志打印到error.log,总大小最大30G，每个文件最大2G，每天1个文件，最多保留15个文件 -->
	<appender name="ERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<file>logs/error.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>logs/error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>2GB</maxFileSize>
			<maxHistory>15</maxHistory>
			<totalSizeCap>30GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS}|[%thread]|%-5level|%logger{36} - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- 
	root 也是<logger>元素，但是它是根logger，如果其他logger没有设置level，那么就会继承root的level
	ALL Level是最低等级的,用于打开所有日志记录
	意味着：任意级别的日志都会打印到，STDOUT，INFO，ERROR，具体的打印级别由appender通过filter过滤
	 -->
	<root level="ALL">
		<appender-ref ref="INFO" />
		<appender-ref ref="ERROR" />
	</root>
</configuration>